<?php

/**
 * @file
 * Functions to support theming in the kramis theme.
 */


// Ads the sidbar entity form layout to other entities besides node.
function _kramis_entity_form_col(&$form, &$form_state, $form_id) {
  // Use the node edit form template.
  $form['#theme'][] = 'node_edit_form';

  // Use the node form layout library.
  $form['#attached']['library'] = ['node/drupal.node'];

  // Create the advanced element if it doesn't exist.
  if (!isset($form['advanced'])) {
    $form['advanced'] = [
      '#type' => 'container',
      '#weight' => 99,
    ];
  }
  else {
    // Make 'advanced' a container instead of vertical_tabs.
    $form['advanced']['#type'] = 'container';
  }

  // Add the style class to tell the admin theme how to style it.
  $form['advanced']['#attributes']['class'][] = 'entity-meta';

  if (!isset($form['meta'])) {
    $form['meta'] = [
      '#type' => 'container',
      '#group' => 'advanced',
      '#weight' => -10,
      '#title' => 'Status',
      '#attributes' => ['class' => ['entity-meta__header']],
      '#tree' => TRUE,
    ];
  }
}


function kramis_gutenberg_node_type_enabled($node){
  $config = \Drupal::service('config.factory')->getEditable('gutenberg.settings');
  return $config->get($node->bundle() . '_enable_full');
}

/**
 * Alters an entity edit form layout.
 *
 * Move the published checkbox to the meta sidebar.
 * Duplicate the submit button and put it in the meta sidebar.
 */
function _kramis_move_entity_form_fields(&$form, &$form_state, $form_id) {


  // Move detail elements into 'advanced'.
  //$form['detail_element_you_want_to_move']['#group'] = 'advanced';

  // move published to meta box.
  if (isset($form['status'])) {
    $form['status']['#group'] = 'meta';
    $form['status']['#weight'] = 1;
  }

  // Duplicate the submit button in to the metabox.
  if (isset($form['actions']['submit'])) {
    $form['sidebar_actions'] = [
      '#type' => 'container',
      '#group' => 'meta',
      '#weight' => -100,
      '#attributes' => ['class' => ['sidebar-actions', 'form-actions']],
      'submit' => $form['actions']['submit'],
    ];
  }

  // Use the formatted name in the author meta.
  if (isset($form['meta']['author']['#markup'])) {
    $entity = $form_state->getFormObject()->getEntity();
    $form['meta']['author']['#markup'] = $entity->getOwner()->getDisplayName();
  }

  // Move the lead image if there is one.
  if (isset($form['field_lead_image'])) {
    // Move the lead image field into the meta box.
    $form['field_lead_image']['#group'] = 'meta';
    //$form['field_lead_image']['widget'][0]['#weight'] = 500;
  }
  if (isset($form['field_cover'])) {
    // Move the lead image field into the meta box.
    $form['field_cover']['#group'] = 'meta';
    //$form['field_lead_image']['widget'][0]['#weight'] = 500;
  }


  /*  if(isset($form['field_cover_image'])){
      // Move the lead image field into the meta box.
      $form['field_cover_image']['#group'] = 'meta';
      //$form['field_lead_image']['widget'][0]['#weight'] = 500;
    }*/

}


/**
 * Implements hook_form_BASE_FORM_alter().
 *
 * Product License entities.
 */
function kramis_form_achievement_form_alter(&$form, &$form_state, $form_id) {
  //_kramis_entity_form_col($form, $form_state, $form_id);
  //_kramis_move_entity_form_fields($form, $form_state, $form_id);
}

/**
 * Implements hook_form_BASE_FORM_alter().
 *
 * Product License entities.
 */
function kramis_form_message_form_alter(&$form, &$form_state, $form_id) {
  _kramis_entity_form_col($form, $form_state, $form_id);
  _kramis_move_entity_form_fields($form, $form_state, $form_id);
}

/**
 * Implements hook_form_BASE_FORM_alter().
 *
 * Product License entities.
 */
function kramis_form_product_license_form_alter(&$form, &$form_state, $form_id) {
  //_kramis_entity_form_col($form, $form_state, $form_id);
  //_kramis_move_entity_form_fields($form, $form_state, $form_id);
}

/**
 * Implements hook_form_BASE_FORM_alter().
 *
 * Group entities.
 */
function kramis_form_group_form_alter(&$form, &$form_state, $form_id) {
  _kramis_entity_form_col($form, $form_state, $form_id);
  _kramis_move_entity_form_fields($form, $form_state, $form_id);
}

/**
 * Implements hook_form_BASE_FORM_alter().
 *
 * Commerce Product entities.
 */
function kramis_form_commerce_product_form_alter(&$form, &$form_state, $form_id) {
  _kramis_move_entity_form_fields($form, $form_state, $form_id);
}

/**
 * Implements hook_form_BASE_FORM_alter().
 *
 * Node entities.
 */
function kramis_form_node_form_alter(&$form, &$form_state, $form_id) {
$node = $form_state->getFormObject()->getEntity();
  if(!kramis_gutenberg_node_type_enabled($node)) {
    //$node = $form_state->getFormObject()->getEntity();
    //if($node->bundle() != 'contest') {
    _kramis_entity_form_col($form, $form_state, $form_id);
    _kramis_move_entity_form_fields($form, $form_state, $form_id);
    //}


    // articles not using gutenberg.
    if($node->bundle() == 'article'){
      $form['moderation_state']['#group'] = 'meta';

      $form['revision_information']['#group'] = 'advanced';
      $form['revision_information']['#type'] = 'details';
      $form['revision_information']['#open'] = FALSE;
      $form['revision_log']['#group'] = 'revision_information';

      $form['field_publish_on']['#group'] = 'meta';

      $form['comment']['widget'][0]['#weight'] = 300;
    }
  } else {
    // Gurenberg sidebar.

    // move published to meta box.
    if (isset($form['status'])) {
      $form['status']['#group'] = 'meta';
      $form['status']['#weight'] = 1;
    }

    $form['moderation_state']['#group'] = 'meta';

    $form['revision_information']['#group'] = 'advanced';
    $form['revision_information']['#type'] = 'details';
    $form['revision_information']['#open'] = FALSE;
    $form['revision_log']['#group'] = 'revision_information';


    $form['field_publish_on']['#group'] = 'meta';

    $form['comment']['widget'][0]['#weight'] = 300;
    // Use the formatted name in the author meta.
    if (isset($form['meta']['author']['#markup'])) {
      $entity = $form_state->getFormObject()->getEntity();
      $form['meta']['author']['#markup'] = $entity->getOwner()->getDisplayName();
    }

  }
}

/**
 * Implements hook_form_BASE_FORM_alter().
 *
 * Node entities.
 */
function kramis_form_block_content_form_alter(&$form, &$form_state, $form_id) {
  _kramis_entity_form_col($form, $form_state, $form_id);
  _kramis_move_entity_form_fields($form, $form_state, $form_id);

   $form['template_suggestion']['#type'] = 'details';
   $form['template_suggestion']['#title'] = t('Template Suggestions');
   $form['template_suggestion']['#open'] = TRUE;

   $form['template_suggestion']['#group'] = 'advanced';
}

/**
 * Implements hook_form_BASE_FORM_alter().
 *
 * Node entities.
 */
function kramis_form_taxonomy_term_form_alter(&$form, &$form_state, $form_id) {
  _kramis_entity_form_col($form, $form_state, $form_id);
  _kramis_move_entity_form_fields($form, $form_state, $form_id);
  // Move relations fieldset to side col.
  if (isset($form['relations'])) {
    $form['relations']['#group'] = 'advanced';
  }
  // Weap Url in fieldset and move to side col.
  if (isset($form['path'])) {
    $form['path_wrapper'] = [
      '#type' => 'details',
      '#title' => t('URL Path'),
      '#group' => 'advanced',
    ];
    $form['path_wrapper']['path'] = $form['path'];
    unset($form['path']);
  }

}

/**
 * Implements hook_form_BASE_FORM_alter().
 *
 * Media entities.
 */
function kramis_form_media_form_alter(&$form, &$form_state, $form_id) {
 // _kramis_entity_form_col($form, $form_state, $form_id);
 // _kramis_move_entity_form_fields($form, $form_state, $form_id);
}

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function kramis_preprocess_html(array &$variables) {
  /* Add class to html tag */
  //$variables['html_attributes']->addClass('no-js');

  // Don't display the site name twice on the front page (and potentially others)
  /*if (isset($variables['head_title_array']['title']) && isset($variables['head_title_array']['name']) && ($variables['head_title_array']['title'] == $variables['head_title_array']['name'])) {
    $variables['head_title'] = $variables['head_title_array']['name'];
  }*/
}

/**
 * Implements hook_page_attachments_alter().
 */
function kramis_page_attachments_alter(array &$page) {
  // Tell IE to use latest rendering engine (not to use compatibility mode).
  /*$ie_edge = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
    'http-equiv' => 'X-UA-Compatible',
    'content' => 'IE=edge',
    ],
  ];
  $page['#attached']['html_head'][] = [$ie_edge, 'ie_edge'];*/
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function kramis_preprocess_page(array &$variables) {

}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function kramis_theme_suggestions_page_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function kramis_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  /*$node = $variables['elements']['#node'];

  if ($variables['elements']['#view_mode'] == "full") {

  }*/
}

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function kramis_preprocess_block(array &$variables) {

}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function kramis_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  $suggestions[] = 'field__' . $element['#view_mode'];
  $suggestions[] = 'field__' . $element['#view_mode'] . '__' . $element['#field_name'];*/
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function kramis_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  if (isset($element['#attributes']['class']) && in_array('form-composite', $element['#attributes']['class'])) {
    $suggestions[] = 'fieldset__form_composite';
  }*/
}

/**
 * Implements hook_preprocess_node().
 */
function kramis_preprocess_node(array &$variables) {
  // Default to turning off byline/submitted.
  $variables['display_submitted'] = FALSE;
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function kramis_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_form().
 */
function kramis_preprocess_form(array &$variables) {
  //$variables['attributes']['novalidate'] = 'novalidate';
}

/**
 * Implements hook_preprocess_select().
 */
function kramis_preprocess_select(array &$variables) {
  //$variables['attributes']['class'][] = 'select-chosen';
}

/**
 * Implements hook_preprocess_field().
 */
function kramis_preprocess_field(array &$variables, $hook) {
  /*switch ($variables['element']['#field_name']) {
  }*/
}

/**
 * Implements hook_preprocess_details().
 */
function kramis_preprocess_details(array &$variables) {
  /*$variables['attributes']['class'][] = 'details';
  $variables['summary_attributes']['class'] = 'summary';*/
}

/**
 * Implements hook_theme_suggestions_details_alter().
 */
function kramis_theme_suggestions_details_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function kramis_preprocess_menu_local_task(array &$variables) {
  //$variables['element']['#link']['url']->setOption('attributes', ['class'=>'rounded']);
}
